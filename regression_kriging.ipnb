{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "geostat.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "i0i84QiA1JDa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from scipy.optimize import minimize"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L1lIvi-91yUY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def borehole_func(r_w, r, T_u, H_u, T_l, H_l, L, K_w):\n",
        "    \"\"\"\n",
        "    Implementation of the borehole function.\n",
        "    \"\"\"\n",
        "    frac1 = 2*np.pi*T_u*(H_u-H_l)\n",
        "    \n",
        "  \n",
        "    frac2a = 2*L*T_u/(np.log(r/r_w)*r_w**2*K_w)\n",
        "    frac2b = T_u / T_l\n",
        "    frac2 = np.log(r/r_w) * (1+frac2a+frac2b)\n",
        "  \n",
        "    return (frac1/frac2)\n",
        "\n",
        "def borehole_vect(X):\n",
        "    \"\"\"\n",
        "    Implementation of the borehole function for numpy arrays.\n",
        "    \"\"\"\n",
        "    r_w = X[:,0]\n",
        "    r = X[:,1]\n",
        "    T_u = X[:,2]\n",
        "    H_u = X[:,3]\n",
        "    T_l = X[:,4]\n",
        "    H_l = X[:,5]\n",
        "    L = X[:,6]\n",
        "    K_w = X[:,7]\n",
        "\n",
        "    return (borehole_func(r_w, r, T_u, H_u, T_l, H_l, L, K_w))\n",
        "\n",
        "def random_borehole_input(size=1):\n",
        "    \"\"\"\n",
        "    Returns a array of dimension (size*d) where each line is randomly sampled\n",
        "    input for the borehole function.\n",
        "    \"\"\"\n",
        "\n",
        "    # Input distribution parameters \n",
        "    d = 8\n",
        "    r_w_mean, r_w_std = 0.10, 0.0161812\n",
        "    r_mean, r_std = 7.71, 1.0056\n",
        "    T_u_min, T_u_max = 63070, 115600\n",
        "    H_u_min, H_u_max = 990, 1110\n",
        "    T_l_min, T_l_max = 63.1, 116\n",
        "    H_l_min, H_l_max = 700, 820\n",
        "    L_min, L_max = 1120, 1680\n",
        "    K_w_min, K_w_max = 9855, 12045\n",
        "\n",
        "    # Helpers for uniform distributions\n",
        "    unif_max = np.array([T_u_max, H_u_max, T_l_max, H_l_max, L_max, K_w_max])\n",
        "    unif_min = np.array([T_u_min, H_u_min, T_l_min, H_l_min, L_min, K_w_min])\n",
        "\n",
        "    # Sampling\n",
        "    r_w_array = np.random.normal(loc=r_w_mean, scale=r_w_std, size=(size, 1))\n",
        "    r_array = np.exp(np.random.normal(loc=r_mean, scale=r_std, size=(size, 1)))\n",
        "    unif_array = (unif_max - unif_min) *np.random.rand(size, d-2) + unif_min\n",
        "\n",
        "    return (np.hstack((r_w_array, r_array, unif_array)))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-Ha687UzDs9Y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "class RegressionKriging():\n",
        "    def __init__(self, F, X_s, y_s):\n",
        "        self.F = F # Regression design matrix\n",
        "        self.X_s = X_s # Input for data points\n",
        "        self.y_s = y_s # Output for data points\n",
        "\n",
        "        self.n = X_s.shape[0]\n",
        "        self.d = X_s.shape[1]\n",
        "\n",
        "        self.theta = None\n",
        "        self.R = None\n",
        "        self.inv_R = None\n",
        "        self.beta = None\n",
        "\n",
        "    def objective_func(self, theta):\n",
        "        self.theta = theta\n",
        "        self.compute_R()\n",
        "        self.compute_inv_R()\n",
        "        self.compute_beta()\n",
        "\n",
        "        R = self.R\n",
        "        inv_R = self.inv_R\n",
        "        beta = self.beta\n",
        "        y_s = self.y_s\n",
        "        F = self.F\n",
        "\n",
        "        det_R = np.linalg.det(R)\n",
        "        sigma_2 = 1/n*(y_s - F.dot(beta)).T.dot(inv_R).dot(y_s - F.dot(beta))\n",
        "        objective = 1/n*np.log(det_R) + np.log(sigma_2)\n",
        "\n",
        "        return(objective)\n",
        "\n",
        "    def compute_R(self):\n",
        "        self.R = np.ones((self.n, self.n))\n",
        "        for i in range(self.n):\n",
        "            for j in range(self.n):\n",
        "                # R[i,j] = R(s_i, s_j)\n",
        "                self.R[i,j] = np.prod(np.exp(-self.theta**2*((self.X_s[i, :] - self.X_s[j, :])**2)))\n",
        "\n",
        "    def compute_inv_R(self):\n",
        "        self.inv_R = np.linalg.inv(self.R)\n",
        "\n",
        "    def compute_r_x(self, x):\n",
        "        n_x = x.shape[0]\n",
        "        r_x = np.ones((self.n, n_x))\n",
        "\n",
        "        for i in range(self.n):\n",
        "            for j in range(n_x):\n",
        "                # r_x[i,j] = R(s_i, x_j)\n",
        "                r_x[i,j] = np.prod(np.exp(-self.theta**2*((self.X_s[i, :] - x[j, :])**2)))\n",
        "\n",
        "        return(r_x)\n",
        "\n",
        "    def compute_beta(self):\n",
        "        F = self.F\n",
        "        inv_R = self.inv_R\n",
        "        y_s = self.y_s\n",
        "        self.beta = np.linalg.inv(F.T.dot(inv_R).dot(F)).dot(F.T).dot(inv_R).dot(y_s)\n",
        "\n",
        "    def compute_prediction(self, x, f_x):\n",
        "        F = self.F\n",
        "        beta = self.beta\n",
        "        inv_R = self.inv_R\n",
        "        y_s = self.y_s\n",
        "\n",
        "        r_x = self.compute_r_x(x)\n",
        "\n",
        "        y_x = f_x.T.dot(beta) + r_x.T.dot(inv_R).dot(y_s - F.dot(beta))\n",
        "        return(y_x)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dRSfVlSN0Wel",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Parameters\n",
        "n = 5000 # number of samples\n",
        "d = 8\n",
        "\n",
        "# Samples inputs\n",
        "X = random_borehole_input(size=n)\n",
        "\n",
        "# Compute ground truth\n",
        "y = borehole_vect(X)\n",
        "\n",
        "# Split Train - Test datasets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)\n",
        "n_train, n_test = X_train.shape[0], X_test.shape[0]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R-3jDXvyNuHz",
        "colab_type": "code",
        "outputId": "16cdc54f-be0f-47e6-98d2-b83f0757b355",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 108
        }
      },
      "source": [
        "# Build Kriging-Regression parameters\n",
        "F = np.ones((n_train,1))  # Simple regression model: constant\n",
        "X_s = (X_train - np.mean(X_train, axis=0))/np.std(X_train, axis=0) # Input for data points\n",
        "y_s = y_train # Output for data points\n",
        "\n",
        "# Build Regressor\n",
        "krig = RegressionKriging(F, X_s, y_s)\n",
        "\n",
        "# Optimize theta (Covariance parameters)\n",
        "theta0 = np.random.rand(krig.d)\n",
        "res = minimize(krig.objective_func, theta0)\n",
        "krig.theta = res.x\n",
        "\n",
        "# Compute kriging parameters\n",
        "krig.compute_R()\n",
        "krig.compute_inv_R()\n",
        "krig.compute_beta()\n",
        "\n",
        "# Prediction of train values\n",
        "x = X_s\n",
        "f_x = np.ones((1,n_train)) # Regression functions value at point x\n",
        "y_x = krig.compute_prediction(x, f_x)\n",
        "mse = np.sqrt(np.mean((y_x - y_train)**2))\n",
        "print('Train RMSE = {}'.format(mse))\n",
        "\n",
        "# Prediction of test values\n",
        "x = (X_test - np.mean(X_test, axis=0))/np.std(X_test, axis=0)\n",
        "f_x = np.ones((1,n_test)) # Regression functions value at point x\n",
        "y_x = krig.compute_prediction(x, f_x)\n",
        "mse = np.sqrt(np.mean((y_x - y_test)**2))\n",
        "print('Test RMSE = {}'.format(mse))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:29: RuntimeWarning: divide by zero encountered in log\n",
            "/usr/local/lib/python3.6/dist-packages/scipy/optimize/optimize.py:697: RuntimeWarning: invalid value encountered in double_scalars\n",
            "  df = (f(*((xk + d,) + args)) - f0) / d[k]\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Train RMSE = 2.535751289405328e-08\n",
            "Test RMSE = 3.864058744242557\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AkbJ7avPbtCL",
        "colab_type": "code",
        "outputId": "f793755e-7076-47cf-e4ff-8dfd47d0f52a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 561
        }
      },
      "source": [
        "y_x"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 64.06446539, 112.41941   ,  55.4514034 , 125.77849118,\n",
              "        75.13772646,  57.42580529,  50.19356043,  87.56162506,\n",
              "        85.19203534,  50.4398647 ,  60.96925154,  80.32815346,\n",
              "        56.37781549,  65.21959249,  30.17466757, 101.13528808,\n",
              "        59.09357362,  74.88187348,  86.25845452,  61.65616044,\n",
              "       103.87327989,  86.42707787,  70.00694078,  59.39641871,\n",
              "        95.50153508, 113.19880842,  51.46815638,  84.52954485,\n",
              "        89.93790353,  57.36716153,  97.16968542,  98.83722538,\n",
              "        49.32291581,  58.11091982,  48.56693098,  55.77798704,\n",
              "        56.24551321,  69.13495016,  46.36033806, 122.3187673 ,\n",
              "        77.89035286, 136.64152377,  52.00825253,  52.55187659,\n",
              "        55.41765424,  50.75950653, 137.62504578,  79.02417978,\n",
              "        96.1448951 ,  42.71591132, 128.95147166, 109.4494839 ,\n",
              "        85.02015249, 110.82677655,  72.60050825,  62.64799944,\n",
              "        66.97888532,  60.37188071,  50.3869447 ,  59.17207034,\n",
              "        73.71195053,  96.57331562,  50.30032597,  56.23173802,\n",
              "        56.11602449,  90.28802965,  52.41082014,  77.79488773,\n",
              "        64.17466738,  66.76104544,  77.26299   ,  70.75391502,\n",
              "        72.17324274,  44.05426435,  53.39657494,  44.6087532 ,\n",
              "       118.86382513,  66.10358164,  42.85540164, 107.56517946,\n",
              "        73.90340418,  62.93387082,  72.92481224,  74.53711655,\n",
              "        74.2833661 ,  66.40861604,  74.03542466,  43.83911482,\n",
              "        87.14587497,  45.93295649,  94.27048746,  66.91576516,\n",
              "        60.88328844,  53.25532548,  35.61617202,  46.79021676,\n",
              "        52.99807465,  53.83417199,  73.23300784,  54.5768117 ,\n",
              "        88.0930847 ,  64.70134718,  90.82246279,  57.15464662,\n",
              "        38.75127173, 103.64825921,  50.10921502,  39.93441261,\n",
              "       119.99402169,  86.74713724, 105.64328759,  54.61488946,\n",
              "        50.23091138, 141.11939924,  93.34364512, 124.53384228,\n",
              "        58.97487563,  62.96558571,  69.03762921,  76.46912072,\n",
              "        62.25914031,  79.28204762,  38.3185744 ,  59.35038578,\n",
              "        46.76337256])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XFc8JMWzupAb",
        "colab_type": "code",
        "outputId": "d709f742-5d96-4550-d32e-6df81cad864b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 561
        }
      },
      "source": [
        "y_test"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 62.43928152, 110.84486453,  53.13456599, 124.58252117,\n",
              "        70.25429056,  56.53678743,  45.72803111,  84.05415965,\n",
              "        80.29797262,  49.03403189,  56.4119079 ,  80.63682734,\n",
              "        51.4382307 ,  63.74043989,  23.79933972,  90.50330638,\n",
              "        59.12508801,  69.6155264 ,  81.66239836,  61.08836952,\n",
              "        99.28266298,  80.61877548,  67.53397138,  53.15301666,\n",
              "        89.38646402, 105.58373997,  46.96540236,  84.59799633,\n",
              "        80.21760558,  52.95256084,  94.45850984,  94.97199502,\n",
              "        47.65189489,  54.51331409,  47.00572652,  51.71366797,\n",
              "        56.97468638,  64.82484894,  43.87158929, 118.1478096 ,\n",
              "       150.64797803, 134.28894125,  48.53099242,  49.85722106,\n",
              "        46.79198005,  48.80211524, 157.08214179,  72.27022001,\n",
              "        95.14042505,  35.77897136, 166.71921693, 103.46854366,\n",
              "        79.39503445, 115.57962435,  70.80090859,  60.03896434,\n",
              "        62.97785828,  58.23177705,  47.09192251,  53.40266203,\n",
              "        74.09169855, 101.58433412,  47.3148647 ,  45.36730918,\n",
              "        55.58961108,  90.16556168,  52.72894009,  73.69488269,\n",
              "        57.47750129,  61.54000585,  72.25924682,  61.31682077,\n",
              "        67.20027486,  41.61813891,  53.45496827,  33.55176546,\n",
              "       113.23455326,  60.58814939,  42.20026837, 143.6804513 ,\n",
              "        69.58204233,  51.19872016,  69.16000026,  71.16943498,\n",
              "        73.14618849,  60.23814649,  70.01372801,  36.67623394,\n",
              "        81.49796185,  41.1167334 ,  95.08055481,  63.66831791,\n",
              "        57.31475916,  41.18984713,  30.60666616,  43.84606089,\n",
              "        46.41217749,  52.2713564 ,  70.87745693,  51.85338941,\n",
              "        85.57841627,  58.73446459,  79.55691573,  54.92597832,\n",
              "        29.41451981, 101.06636365,  49.05681677,  37.42970337,\n",
              "       118.51950584,  82.04375038, 120.76944994,  53.51778366,\n",
              "        42.50708492, 129.2842379 ,  90.33265595, 115.38428272,\n",
              "        58.67757708,  60.40537577,  68.28318252,  75.79755655,\n",
              "        56.98716578,  77.32240969,  22.24057296,  57.14338283,\n",
              "        46.05585836])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 131
        }
      ]
    }
  ]
}